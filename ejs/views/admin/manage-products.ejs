<%- include('header', { title: 'Manage Products' }) %>
  <%- include('header') %>

    <div class="app-wrapper">

      <div class="app-content pt-3 p-md-3 p-lg-4">
        <div class="container-xl">

          <div class="row g-3 mb-4 align-items-center justify-content-between">
            <h2>Manage Products</h2>
            <button class="btn" onclick="showProductForm()">Add New Product</button>



            <div class="modal-overlay hidden" onclick="hideProductForm()"></div>

            <table id="productTable" class="product-table">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Name</th>
                  <th>Price</th>
                  <th>Stock</th>
                  <th>Image</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <% products.forEach(product=> { %>
                  <tr>
                    <td>
                      <%= product.id %>
                    </td>
                    <td>
                      <%= product.name %>
                    </td>
                    <td>$<%= product.price %>
                    </td>
                    <td>
                      <%= product.stock %>
                    </td>
                    <td>
                      <% if (product.images && product.images.length> 0) { %>
                        <% product.images.forEach(image=> { %>
                          <img src="../<%= image %>" width="50" style="margin-right: 5px;">
                          <% }); %>
                            <% } else { %>
                              No Image
                              <% } %>
                    </td>

                    <td>
                      <button onclick="editProduct('<%= product._id %>')">Edit</button>
                      <button onclick="deleteProduct('<%= product._id %>')">Delete</button>
                    </td>
                  </tr>
                  <% }); %>
              </tbody>
            </table>
          </div>
        </div>
      </div>




      <!-- Add/Edit Product Modal -->
      <div id="productModal" class="productmodal hidden">
        <h2 id="modalTitle">Add New Product</h2>
        <form id="productForm" onsubmit="handleProductFormSubmit(event)">
          <!-- Product Name -->
          <label for="productName">Product Name:</label>
          <input type="text" id="productName" name="name" required placeholder="Enter product name">

          <!-- Category -->
          <label for="productCategory">Category:</label>
          <select id="productCategory" name="category" required>
            <option value="" disabled selected>Select Category</option>
            <option value="Necklace">Necklace</option>
            <option value="Rings">Rings</option>
            <option value="Earrings">Earrings</option>
            <option value="Bracelet">Bracelet</option>
            <option value="Pendant">Pendant</option>
            <option value="Set">Set</option>
          </select>
          <br>

          <!-- Price -->
          <label for="productPrice">Price:</label>
          <input type="number" id="productPrice" name="price" required min="0" placeholder="Enter price">

          <label for="productStartingPrice">Starting price:</label>
          <input type="number" id="productStartingPrice" name="startingPrice" required min="0" placeholder="Enter starting price">

          <!-- Description -->
          <label for="productDescription">Description:</label>
          <textarea id="productDescription" name="description" required placeholder="Enter description"></textarea>

          <label for="productBrand">Brand</label>
          <input type="text" id="productBrand" name="brand" placeholder="Enter brand" required>

          <!-- Stock -->
          <label for="productStock">Stock:</label>
          <input type="number" id="productStock" name="stock" required min="0" placeholder="Enter stock quantity">

          <!-- Material -->
          <label for="productMaterial">Material:</label>
          <select id="productMaterial" name="material">
            <option value="" disabled selected>Select Material</option>
            <option value="Gold">Gold</option>
            <option value="Silver">Silver</option>
            <option value="Platinum">Platinum</option>
            <option value="Diamond">Diamond</option>
            <option value="Gemstone">Gemstone</option>
          </select>

          <!-- Weight -->
          <label for="productWeight">Weight (grams):</label>
          <input type="number" id="productWeight" name="weight" required min="0" placeholder="Enter weight in grams">

          <!-- Color -->
          <label for="productColor">Color:</label>
          <input type="text" id="productColor" name="color" placeholder="Enter color (optional)" required>

          <!--attantionLabel -->
          <label for="productAttention">Attention:</label>
<select id="productAttention" name="attentionLevel">
  <option value="" selected>Optional</option>
  <option value="Low">Low</option>
  <option value="Medium">Medium</option>
  <option value="High">High</option>
</select>


          <!-- Dimensions -->
          <label for="productDimensions">Dimensions:</label>
          <input type="text" id="productDimensions" name="dimensions" placeholder="Enter dimensions (optional)">

          <!-- Rating -->
          <label for="productRating">Rating (0-5):</label>
          <input type="number" id="productRating" name="rating" min="0" max="5" placeholder="Enter rating (optional)">

          <!-- Upload Images -->
          <label for="image">Upload Images:</label><br>
          <div id="image-container">
            <div class="input-group">
              <input type="file" id="images" name="images" accept=".jpg, .jpeg, .png, .pdf" multiple required>
              <button type="button" onclick="addImageField()">+</button>
            </div>
          </div>

          <!-- Submit Button -->
          <button type="submit">Save</button>
          <button type="button" onclick="hideProductForm()">Cancel</button>
        </form>
        <!-- Modal Footer with Close Button -->
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" onclick="hideProductForm()">Close</button>
        </div>
      </div>


      <!-- Add before </body> -->
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    </div>

    <script>
      let editProductId = null;

      function showProductForm() {
        const modal = document.getElementById('productModal');
        modal.classList.remove('hidden');
        modal.style.display = 'block';
        document.getElementById('modalTitle').innerText = 'Add New Product';
        document.getElementById('productForm').reset();
        editProductId = null;
      }

      function hideProductForm() {
        const modal = document.getElementById('productModal');
        modal.classList.add('hidden');
        modal.style.display = 'none'; // Ensure it's completely hidden
      }


      function addImageField() {
        const container = document.getElementById('image-container');
        const newImageInput = document.createElement('div');
        newImageInput.className = 'input-group';
        newImageInput.innerHTML = '<input type="file" id="images" name="images" accept=".jpg, .jpeg, .png, .pdf" multiple required><button type="button" onclick="removeField(this)">-</button>';
        container.appendChild(newImageInput);
      }

      function removeField(button) {
        const container = button.parentNode.parentNode;
        container.removeChild(button.parentNode);
      }

      async function handleProductFormSubmit(event) {
        event.preventDefault();

        const formData = new FormData(document.getElementById('productForm'));
        console.log(editProductId);
        const url = editProductId ? `/admin/product/${editProductId}` : '/admin/product/new';
        const method = editProductId ? 'PUT' : 'POST';

        try {
          const response = await fetch(url, {
            method,
            body: formData,
          });

          if (response.ok) {
            alert(editProductId ? 'Product updated successfully!' : 'Product added successfully!');
            hideProductForm();
            location.reload(); // Refresh product list
          } else {
            const error = await response.json();
            alert('Error: ' + error.message);
          }
        } catch (err) {
          console.error('Error:', err);
          alert('Failed to save product. Please try again.');
        }
      }

      async function editProduct(productId) {
        try {
          // Fetch product data from the server
          const response = await fetch(`/admin/product/${productId}`);

          console.log(productId);

          // If the response is not okay (status is not 2xx), throw an error
          if (!response.ok) {
            if (response.status === 404) {
              alert('Product not found in frontend');
            } else {
              alert('Failed to fetch product data');
            }
            return;
          }

          // Parse the response body as JSON
          const product = await response.json();
          console.log(product.name);

          // Check if the product data exists
          if (!product) {
            alert('Product not found');
            return;
          }

          showProductForm();

          // Populate form with existing product data
          document.getElementById('productName').value = product.name || '';
          document.getElementById('productCategory').value = product.category || '';
          document.getElementById('productPrice').value = product.price || '';
          document.getElementById('productStartingPrice').value = product.startingPrice || '';
          document.getElementById('productDescription').value = product.description || '';
          document.getElementById('productBrand').value = product.brand || '';
          document.getElementById('productStock').value = product.stock || '';
          document.getElementById('productMaterial').value = product.material || '';
          document.getElementById('productWeight').value = product.weight || '';
          document.getElementById('productDimensions').value = product.dimensions || '';
          document.getElementById('productRating').value = product.rating || '';
          document.getElementById('productColor').value = product.color || '';
          document.getElementById('productAttention').value = product.attentionLevel || '';
          document.getElementById('images').removeAttribute('required');

          // Display existing images
          const imageContainer = document.getElementById('image-container');
          if (product.images && product.images.length > 0) {
            product.images.forEach((image, index) => {
              const imgElement = document.createElement('img');
              imgElement.src = `../${image}`;
              imgElement.alt = `Image ${index + 1}`;
              imgElement.width = 50;
              imgElement.style.marginRight = '5px';

              // Optionally, allow removing images
              const removeButton = document.createElement('button');
              removeButton.textContent = 'Remove';
              removeButton.style.marginLeft = '5px';
              removeButton.onclick = () => {
                imgElement.remove();
                removeButton.remove();
              };

              const wrapper = document.createElement('div');
              wrapper.style.display = 'inline-block';
              wrapper.style.marginBottom = '10px';
              wrapper.appendChild(imgElement);
              wrapper.appendChild(removeButton);

              imageContainer.appendChild(wrapper);
            });
          }
          // Set product ID for edit submission
          editProductId = productId;


          document.getElementById('modalTitle').innerText = 'Edit Product';
        } catch (err) {
          console.error('Error fetching product:', err);
        }
      }


      async function deleteProduct(productId) {
        if (confirm('Are you sure you want to delete this product?')) {
          try {
            const response = await fetch(`/admin/product/${productId}/delete`, {
              method: 'DELETE',
            });

            if (response.ok) {
              alert('Product deleted successfully!');
              location.reload(); // Refresh product list
            } else {
              const error = await response.json();
              alert('Error deleting product: ' + error.message);
            }
          } catch (err) {
            console.error('Error:', err);
            alert('Failed to delete product. Please try again.');
          }
        }
      }
    </script>

    <!-- Javascript -->
    <script src="../assets/plugins/popper.min.js"></script>
    <script src="../assets/plugins/bootstrap/js/bootstrap.min.js"></script>

    <!-- Charts JS -->
    <script src="../assets/plugins/chart.js/chart.min.js"></script>
    <script src="../assets/js/index-charts.js"></script>

    <!-- Page Specific JS -->
    <script src="../assets/js/app.js"></script>

    </body>

    </html>